# -*- coding: utf-8 -*-
"""preprocessing_layers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/tensorflow/docs/blob/master/site/en/tutorials/structured_data/preprocessing_layers.ipynb

##### Copyright 2019 The TensorFlow Authors.
"""

#@title Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""# Classify structured data using Keras Preprocessing Layers

<table class="tfo-notebook-buttons" align="left">
  <td>
    <a target="_blank" href="https://www.tensorflow.org/tutorials/structured_data/preprocessing_layers">
    <img src="https://www.tensorflow.org/images/tf_logo_32px.png" />
    View on TensorFlow.org</a>
  </td>
  <td>
    <a target="_blank" href="https://colab.research.google.com/github/tensorflow/docs/blob/master/site/en/tutorials/structured_data/preprocessing_layers.ipynb">
    <img src="https://www.tensorflow.org/images/colab_logo_32px.png" />
    Run in Google Colab</a>
  </td>
  <td>
    <a target="_blank" href="https://github.com/tensorflow/docs/blob/master/site/en/tutorials/structured_data/preprocessing_layers.ipynb">
    <img src="https://www.tensorflow.org/images/GitHub-Mark-32px.png" />
    View source on GitHub</a>
  </td>
  <td>
    <a href="https://storage.googleapis.com/tensorflow_docs/docs/site/en/tutorials/structured_data/preprocessing_layers.ipynb"><img src="https://www.tensorflow.org/images/download_logo_32px.png" />Download notebook</a>
  </td>
</table>

This tutorial demonstrates how to classify structured data (e.g. tabular data in a CSV). You will use [Keras](https://www.tensorflow.org/guide/keras) to define the model,
and [preprocessing layers](https://www.tensorflow.org/guide/keras/preprocessing_layers) as a bridge to map from columns in a CSV to features used to train the model.
This tutorial contains complete code to:

* Load a CSV file using [Pandas](https://pandas.pydata.org/).
* Build an input pipeline to batch and shuffle the rows using [tf.data](https://www.tensorflow.org/guide/datasets).
* Map from columns in the CSV to features used to train the model using Keras Preprocessing layers.
* Build, train, and evaluate a model using Keras.

Note: This tutorial is similar to [Classify structured data with feature columns](https://www.tensorflow.org/tutorials/structured_data/feature_columns).
This version uses new experimental Keras [Preprocessing Layers](https://www.tensorflow.org/api_docs/python/tf/keras/layers/experimental/preprocessing) instead of `tf.feature_column`.
Keras Preprocessing Layers are more intuitive, and can be easily included inside your model to simplify deployment.

## The Dataset

You will use a simplified version of the PetFinder [dataset](https://www.kaggle.com/c/petfinder-adoption-prediction).
There are several thousand rows in the CSV. Each row describes a pet, and each column describes an attribute. You will use this information to predict if the pet will be adopted.

Following is a description of this dataset. Notice there are both numeric and categorical columns. There is a free text column which you will not use in this tutorial.


Column | Description| Feature Type | Data Type
------------|--------------------|----------------------|-----------------
Region | Region identifier (10, 20, 30, 40) | Numerical | integer
Office | Office identifier (100, 200, 300, 400) | Numerical | integer
Revenue | Customer revenue | Numerical | float64
Segment | belong to segment | Classification | string

"""

import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '1' 
import numpy as np
import pandas as pd
import tensorflow as tf

from sklearn.model_selection import train_test_split
from tensorflow.keras import layers
from tensorflow.keras.layers.experimental import preprocessing

"""## Use Pandas to create a dataframe

[Pandas](https://pandas.pydata.org/) is a Python library with many helpful utilities for loading and working with structured data.
You will use Pandas to download the dataset from a URL, and load it into a dataframe.
"""

import pathlib

# Define all column in the dataset
#
CSV_COLUMN_NAMES = ['region', 'office', 'revenue', 'segment']
# Target column to predict
LABELS = ['mini', 'micro', 'mellan', 'stor']
#
model_name = 'saved_model/my_segment_classifier'

print("Using nvidia 2070 super, 2560 Cuda GPU cores")
train_path = tf.keras.utils.get_file(
    "segment_training_v4.csv", "http://localhost:8443/segment_training_v4")
test_path = tf.keras.utils.get_file(
    "segment_evaluation_v4.csv", "http://localhost:8443/segment_evaluation_v4")

dataframe = pd.read_csv(train_path, names=CSV_COLUMN_NAMES, header=0)
print(dataframe.head())
print(dataframe.dtypes)  

"""## Create target variable

The task in the Kaggle competition is to predict the speed at which a pet will be adopted (e.g., in the first week, the first month,
the first three months, and so on).
Let's simplify this for our tutorial. Here, you will transform this into a binary classification problem, and simply predict whether the pet was adopted, or not.

After modifying the label column, 0 will indicate the pet was not adopted, and 1 will indicate it was.
"""

# In the original dataset "4" indicates the pet was not adopted.
dataframe['target'] = dataframe['segment']

# Drop un-used columns.
dataframe = dataframe.drop(columns=['segment'])

"""## Split the dataframe into train, validation, and test

The dataset you downloaded was a single CSV file. You will split this into train, validation, and test sets.
"""

train, test = train_test_split(dataframe, test_size=0.3)
train, val = train_test_split(train, test_size=0.3)
print(len(train), 'train examples')
print(len(val), 'validation examples')
print(len(test), 'test examples')
print('-- Train -------------------')
print(train.shape)
print(train.dtypes)
print(train.head())
print('-- Val -------------------')
print(val.shape)
print(val.dtypes)
print(val.head())
print('-- Test -------------------')
print(test.shape)
print(test.dtypes)
print(test.head())
print('------------------------------')

"""## Create an input pipeline using tf.data

Next, you will wrap the dataframes with [tf.data](https://www.tensorflow.org/guide/datasets), 
in order to shuffle and batch the data. 
If you were working with a very large CSV file (so large that it does not fit into memory),
you would use tf.data to read it from disk directly. That is not covered in this tutorial.
"""

# A utility method to create a tf.data dataset from a Pandas Dataframe
def df_to_dataset(dataframe, shuffle=True, batch_size=32):
  dataframe = dataframe.copy()
  labels = dataframe.pop('target')
  ds = tf.data.Dataset.from_tensor_slices((dict(dataframe), labels))
  if shuffle:
    ds = ds.shuffle(buffer_size=len(dataframe))
  ds = ds.batch(batch_size)
  ds = ds.prefetch(batch_size)
  return ds

"""Now that you have created the input pipeline, 
let's call it to see the format of the data it returns. 
You have used a small batch size to keep the output readable."""

batch_size = 5
train_ds = df_to_dataset(train, batch_size=batch_size)
print('-- train_ds -------------------')

print(train_ds)

[(train_features, label_batch)] = train_ds.take(1)
print('Every feature:', list(train_features.keys()))
print('A batch of revenue:', train_features['revenue'])
print('A batch of targets (labels):', label_batch )

"""You can see that the dataset returns a dictionary of column names (from the dataframe)
that map to column values from rows in the dataframe.

## Demonstrate the use of preprocessing layers.

The Keras preprocessing layers API allows you to build Keras-native input processing pipelines.
You will use 3 preprocessing layers to demonstrate the feature preprocessing code.

*   [`Normalization`](https://www.tensorflow.org/api_docs/python/tf/keras/layers/experimental/preprocessing/Normalization) - Feature-wise normalization of the data.
*   [`CategoryEncoding`](https://www.tensorflow.org/api_docs/python/tf/keras/layers/experimental/preprocessing/CategoryEncoding) - Category encoding layer.
*   [`StringLookup`](https://www.tensorflow.org/api_docs/python/tf/keras/layers/experimental/preprocessing/StringLookup) - Maps strings from a vocabulary to integer indices.
*   [`IntegerLookup`](https://www.tensorflow.org/api_docs/python/tf/keras/layers/experimental/preprocessing/IntegerLookup) - Maps integers from a vocabulary to integer indices.

You can find a list of available preprocessing layers 
[here](https://www.tensorflow.org/api_docs/python/tf/keras/layers/experimental/preprocessing).

### Numeric columns
For each of the Numeric feature, you will use a Normalization() layer to make sure the mean of each
feature is 0 and its standard deviation is 1.

`get_normalization_layer` function returns a layer which applies featurewise normalization to numerical features.
"""

def get_normalization_layer(name, dataset):
  # Create a Normalization layer for our feature.
  normalizer = preprocessing.Normalization()
  # Prepare a Dataset that only yields our feature.
  feature_ds = dataset.map(lambda x, y: x[name])
  # Learn the statistics of the data.
  normalizer.adapt(feature_ds)
  return normalizer

#revenue_count_col = train_features['Revenue']
#layer = get_normalization_layer('Revenue', train_ds)
#layer(revenue_count_col)

"""Note: If you many numeric features (hundreds, or more), 
it is more efficient to concatenate them first and use a single 
[normalization](https://www.tensorflow.org/api_docs/python/tf/keras/layers/experimental/preprocessing/Normalization) layer.

### Categorical columns
In this dataset, Type is represented as a string (e.g. 'Dog', or 'Cat').
You cannot feed strings directly to a model. The preprocessing layer takes care of representing strings as a one-hot vector.

`get_category_encoding_layer` 
function returns a layer which maps values from a vocabulary to integer indices and one-hot encodes the features.
"""

def get_category_encoding_layer(name, dataset, dtype, max_tokens=None):
  # Create a StringLookup layer which will turn strings into integer indices
  if dtype == 'string':
    index = preprocessing.StringLookup(max_tokens=max_tokens)
  else:
    index = preprocessing.IntegerLookup(max_values=max_tokens)
  # Prepare a Dataset that only yields our feature
  feature_ds = dataset.map(lambda x, y: x[name])
  # Learn the set of possible values and assign them a fixed integer index.
  index.adapt(feature_ds)
  # Create a Discretization for our integer indices.
  encoder = preprocessing.CategoryEncoding(max_tokens=index.vocab_size())
  # Prepare a Dataset that only yields our feature.
  feature_ds = feature_ds.map(index)
  # Learn the space of possible indices.
  encoder.adapt(feature_ds)
  # Apply one-hot encoding to our indices. The lambda function captures the
  # layer so we can use them, or include them in the functional model later.
  return lambda feature: encoder(index(feature))

############################################################################################################
#
# Vilka ska vi sätta get_categorical_encoding layer, vi har ingen type string i nuvarande dataset
#
#type_col = train_features['region']
#layer = get_category_encoding_layer('region', train_ds, 'int64')
#layer(type_col)
#print('*********')
#print(type_col)

#
############################################################################################################
"""Often, you don't want to feed a number directly into the model, 
but instead use a one-hot encoding of those inputs. Consider raw data that represents a pet's age."""

############################################################################################################
#
#type_col = train_features['office']
#category_encoding_layer = get_category_encoding_layer('office', train_ds, 'int64', 5)
#category_encoding_layer(type_col)
#
############################################################################################################
"""## Choose which columns to use
You have seen how to use several types of preprocessing layers. Now you will use them to train a model. 
You will be using [Keras-functional API](https://www.tensorflow.org/guide/keras/functional) to build the model. 
The Keras functional API is a way to create models that are more flexible than the 
[tf.keras.Sequential](https://www.tensorflow.org/api_docs/python/tf/keras/Sequential) API.

The goal of this tutorial is to show you the complete code (e.g. mechanics) needed to work with preprocessing layers.
A few columns have been selected arbitrarily to train our model.

Key point: If your aim is to build an accurate model, try a larger dataset of your own, 
and think carefully about which features are the most meaningful to include, and how they should be represented.

Earlier, you used a small batch size to demonstrate the input pipeline. 
Let's now create a new input pipeline with a larger batch size.
"""

batch_size = 256
train_ds = df_to_dataset(train, batch_size=batch_size)
val_ds = df_to_dataset(val, shuffle=False, batch_size=batch_size)
test_ds = df_to_dataset(test, shuffle=False, batch_size=batch_size)

all_inputs = []
encoded_features = []

# Numeric features.
for header in ['revenue']:
  revenue_col = tf.keras.Input(shape=(1,), name=header, dtype='float64')
  normalization_layer = get_normalization_layer(header, train_ds)
  encoded_revenue_col = normalization_layer(revenue_col)
  all_inputs.append(revenue_col)
  print("revenue_col: {}".format(revenue_col))
  encoded_features.append(encoded_revenue_col)

# Categorical features encoded as integers. (Region)
region_col = tf.keras.Input(shape=(1,), name='region', dtype='int64')
encoding_layer = get_category_encoding_layer('region', train_ds, dtype='int64', max_tokens=4)
print("****************************")
print("encoding_layer: {}".format(encoding_layer))
print("****************************")
encoded_region_col = encoding_layer(region_col)
print("encoding_region_col: {}".format(encoded_region_col))
all_inputs.append(region_col)
print("region_col: {}".format(region_col))
encoded_features.append(encoded_region_col)

##
for input in all_inputs:
  print(input)
#

# Categorical features encoded as integers. (Office)
office_col = tf.keras.Input(shape=(1,), name='office', dtype='int64')
encoding_layer = get_category_encoding_layer('office', train_ds, dtype='int64', max_tokens=4)
encoded_office_col = encoding_layer(office_col)
all_inputs.append(office_col)
print("office_col: {}".format(office_col))
encoded_features.append(encoded_office_col)

# Categorical features encoded as string. (Om vi hade haft namn på Region och Office hade vi använd denna funktion)
# categorical_cols = ['Type', 'Color1', 'Color2', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated', 'Sterilized', 'Health', 'Breed1']
#for header in categorical_cols:
#  categorical_col = tf.keras.Input(shape=(1,), name=header, dtype='string')
#  encoding_layer = get_category_encoding_layer(header, train_ds, dtype='string',max_tokens=5)
#  encoded_categorical_col = encoding_layer(categorical_col)
#  all_inputs.append(categorical_col)
#  encoded_features.append(encoded_categorical_col)

"""## Create, compile, and train the model

Now you can create our end-to-end model.
We have four output classes Dense(4, ....)
"""
print("encoded_features")
print(encoded_features)
print("--------------------------------")

all_features = tf.keras.layers.concatenate(encoded_features)
x = tf.keras.layers.Dense(512, activation="relu")(all_features)
x = tf.keras.layers.Dense(256, activation="relu")(x)
x = tf.keras.layers.Dense(128, activation="relu")(x)
x = tf.keras.layers.Dense(10, activation="relu")(x)
x = tf.keras.layers.Dropout(0.1)(x)
output = tf.keras.layers.Dense(4, activation="softmax", name="predictions")(x)
model = tf.keras.Model(inputs=all_inputs, outputs=output)
model.compile(optimizer='adam', 
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=["accuracy"])
model.summary()
# Let's visualize our connectivity graph:

# rankdir='LR' is used to make the graph horizontal.
tf.keras.utils.plot_model(model, show_shapes=True, rankdir="LR")

### Train the model
#tensorboard_callback = tf.keras.callbacks.TensorBoard(
#    log_dir='./logs', histogram_freq=0, write_graph=True, write_images=False,
#    update_freq='epoch', profile_batch=2, embeddings_freq=0,
#    embeddings_metadata=None
#)
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir="saved_model/logs/my_segment_classifier",
                                                    write_graph=True,
                                                    embeddings_freq=5,
                                                    histogram_freq=5,
                                                    embeddings_layer_names=None,
                                                    embeddings_metadata=None)

# model.fit(train_ds, epochs=15, validation_data=val_ds, callbacks=[tensorboard_callback])
#
# Tensorboard libcupti.so.11.0 krävs för att göra tensorboard, med tf_nightly-gpu verkar vara kompilerad för
# libcupti.so.11.0 och inte libcupti.so.11,1 som kommer med tensorflow build.
# Kan även vara att tensorboard-plugin-profile endast finns i version 2.3.0
#
model.fit(train_ds, epochs=500, validation_data=val_ds)
model.summary()
loss, accuracy = model.evaluate(test_ds)

## Inference on new data
"""
Key point: The model you have developed can now classify a row from a CSV file directly, 
because the preprocessing code is included inside the model itself.

You can now save and reload the Keras model. 
Follow the tutorial [here](https://www.tensorflow.org/tutorials/keras/save_and_load) for more information on
TensorFlow models.
"""

model.save(model_name)
print("End training - loss: {:3.4f} Accuracy {:3.2f}%".format(loss * 100, 100 * accuracy))
print("Model has been save {}...".format(model_name))